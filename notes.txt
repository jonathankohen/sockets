SOCKET

a real-time bi-directional communication channel between a client and a server. 

Whenever you write a chat message, the idea is that the server will get it and push it to all other connected clients.



set sockets to never stop trying to reconnect
use sockets to:
sync vids, make any changes to vids (play, next, etc.)
maintain rooms
set session

client-side of sockets are connected when you open multiple windows
on form submit, if input.value exists, emit to server. then set input.value to ''

add listener to server that receives data and 

CLIENT
form.addEventListener('submit', function(e) {
    e.preventDefault();
    if (input.value) {
      socket.emit('chat message', input.value);
      input.value = '';
    }
  });

  socket.on('chat message', function(msg) {
    var item = document.createElement('li');
    item.textContent = msg;
    messages.appendChild(item);
    window.scrollTo(0, document.body.scrollHeight);
  });

SERVER
io.on('connection', (socket) => {
  socket.on('chat message', (msg) => {
    io.emit('chat message', msg);
  });
});



"HOMEWORK"
Broadcast a message to connected users when someone connects or disconnects.
Add support for nicknames.
Don’t send the same message to the user that sent it. Instead, append the message directly as soon as he/she presses enter.
Add “{user} is typing” functionality.
Show who’s online.
Add private messaging.
Share your improvements!